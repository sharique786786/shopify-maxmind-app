"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const snakecaseKeys = require("snakecase-keys");
const errors_1 = require("../errors");
const account_1 = require("./account");
const billing_1 = require("./billing");
const credit_card_1 = require("./credit-card");
const custom_input_1 = require("./custom-input");
const device_1 = require("./device");
const email_1 = require("./email");
const event_1 = require("./event");
const order_1 = require("./order");
const payment_1 = require("./payment");
const shipping_1 = require("./shipping");
const shopping_cart_item_1 = require("./shopping-cart-item");
class Transaction {
    constructor(transaction) {
        this.ensureTypes(transaction);
        Object.assign(this, transaction);
        if (transaction.customInputs != null) {
            this.customInputs = Object.assign({}, ...transaction.customInputs);
        }
    }
    toString() {
        const sanitized = this.sanitizeKeys();
        if (sanitized.order != null && sanitized.order.referrerUri) {
            sanitized.order.referrerUri = sanitized.order.referrerUri.toString();
        }
        return JSON.stringify(snakecaseKeys(sanitized));
    }
    argumentCheck(property, type, key) {
        if (property != null && !(property instanceof type)) {
            throw new errors_1.ArgumentError(`\`${key}\` needs to be an instance of ${type.name}`);
        }
    }
    sanitizeKeys() {
        const sanitized = Object.assign({}, this);
        if (sanitized.creditCard != null &&
            sanitized.creditCard.last4digits != null) {
            sanitized.creditCard.last_4_digits = this.creditCard.last4digits;
            delete sanitized.creditCard.last4digits;
        }
        if (sanitized.billing != null && sanitized.billing.address2 != null) {
            sanitized.billing.address_2 = this.billing.address2;
            delete sanitized.billing.address2;
        }
        if (sanitized.shipping != null && sanitized.shipping.address2 != null) {
            sanitized.shipping.address_2 = this.shipping.address2;
            delete sanitized.shipping.address2;
        }
        return sanitized;
    }
    checkRegularProps(props) {
        const propTypeMap = {
            account: account_1.default,
            billing: billing_1.default,
            creditCard: credit_card_1.default,
            device: device_1.default,
            email: email_1.default,
            event: event_1.default,
            order: order_1.default,
            payment: payment_1.default,
            shipping: shipping_1.default,
        };
        const keys = Object.keys(propTypeMap);
        for (const key of keys) {
            this.argumentCheck(props[key], propTypeMap[key], key);
        }
    }
    checkArrayProps(props) {
        if (props.shoppingCart != null) {
            for (const [idx, item] of props.shoppingCart.entries()) {
                if (!(item instanceof shopping_cart_item_1.default)) {
                    throw new errors_1.ArgumentError(`\`shoppingCart[${idx}]\` needs to be an instance of ShoppingCartItem`);
                }
            }
        }
        if (props.customInputs != null) {
            for (const [idx, item] of props.customInputs.entries()) {
                if (!(item instanceof custom_input_1.default)) {
                    throw new errors_1.ArgumentError(`\`customInputs[${idx}]\` needs to be an instance of CustomInput`);
                }
            }
        }
    }
    ensureTypes(props) {
        this.checkRegularProps(props);
        this.checkArrayProps(props);
    }
}
exports.default = Transaction;
